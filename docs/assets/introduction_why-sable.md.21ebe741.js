import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.b8722102.js";const b=JSON.parse('{"title":"Why Sable?","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/why-sable.md","filePath":"introduction/why-sable.md"}'),n={name:"introduction/why-sable.md"},i=o('<h1 id="why-sable" tabindex="-1">Why <strong>Sable</strong>? <a class="header-anchor" href="#why-sable" aria-label="Permalink to &quot;Why **Sable**?&quot;">â€‹</a></h1><p>The <strong>Marten</strong> team has done a phenomenal job with providing the foundational infrastructure required for managing database migrations. The command line tooling for that is made available via the <code>Marten.CommandLine</code> package, and works just fine. With a connection string that is sufficiently privileged to execute migration scripts, the <code>marten-patch</code> and <code>marten-apply</code> commands can easily be used to carry out the process. However, in a corporate environment like Bloomberg, this approach is not feasible. But why not? Well, for local development, it&#39;s not an issue, but for other environments like dev, alpha, beta, and prod, we&#39;ve encountered some limitations because of the following reasons:</p><ul><li>There&#39;s a standard process for executing database migrations scripts. An engineer can&#39;t just point to a database to run migrations, but needs to submit a ticket that must be approved by a manager/team lead before the script can be executed.</li><li>An application will often be deployed to multiple environments in a sequential deployment pipeline (e.g., dev -&gt; alpha -&gt; beta -&gt; prod). Furthermore, these deployments won&#39;t happen in a compressed time frame. You want to test things in one environment before proceeding to the next, so it might take at least a week before moving from one environment the next. As a result, a lot of questions/concerns will surface: <ul><li>How to know which scripts have already been applied to which environments?</li><li>How to make sure scripts are applied in the same order for each environment in the deployment pipeline?</li><li>How to guard against human errors like applying a script in an environment more than once? Errors like this can lead to costly outcomes like an accidentally dropped table.</li></ul></li></ul><p><strong>Sable</strong> solves all of these problem by taking a simple, intuitive, and minimally-invasive approach. Curious to know how it works? See <a href="/sable/reference/how-sable-works.html">How Sable Works</a> to learn more.</p>',4),r=[i];function s(l,c,d,p,h,m){return t(),a("div",null,r)}const g=e(n,[["render",s]]);export{b as __pageData,g as default};
